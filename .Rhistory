i=i+1
i,s = 0,3
while s< 20:
s=s+i
i=i+1
print(s)
print(s)
print(s)
i,s = 0,3
while s< 20:
s=s+i
i=i+1
print(s)
i,s = 0,3
while s< 20:
s=s+i
i=i+1
print(s)
s=0
for i in range(1,6):
s=s+i
print(s)
s=s+i
s=0
for i in range(1,6):
s=s+i
print(s)
s=s+i
for i in range(1,6):
print(i)
for i in range(1,6):
print(i)
L=[5,3,1,2,4,0]
for e in L:
print (L[e])
L=[5,3,1,2,4,0]
for e in L:
print (L[e])
# DS 413/613
# Functions  Chapters 15 and 17
library(tidyverse)
volume_cylinder <- function(r, h) {
pi*r^2*h
}
# DS 413/613
# Functions  Chapters 15 and 17
library(tidyverse)
volume_cylinder <- function(r, h) {
pi*r^2*h
}
volume_cylinder(4, 6)
volume_cylinder(3, 10)
# Example 2
volume_cylinder <- function(r, h) {
V = pi*r^2*h
print(paste("The volume of a cylinder with a radius of 4 and
a height of 6 is",V))
}
volume_cylinder(4, 6)
# Example 3
volume_cylinder <- function(r, h) {
V = pi*r^2*h
print(paste("The volume of a cylinder with a radius of 4 and
a height of 6 is",
round(V, digits = 3)))
}
volume_cylinder(4, 6)
volume_cylinder <- function(r, h) {
pi*r^2*h
}
volume_cylinder(4, 6)
# Example 3
volume_cylinder <- function(r, h) {
V = pi*r^2*h
print(paste("The volume of a cylinder with a radius of 4 and
a height of 6 is",
round(V, digits = 0)))
}
volume_cylinder(4, 6)
# function to print x raised to the power y
pow <- function(x, y) {
result <- x^y
print(paste(x,"raised to the power", y, "is", result))
}
pow(8, 2)
pow(2,8)
pow(x = 2, y = 8)
pow(y = 8, x = 2)
pow(x=8, 2)
pow(2, x = 8)
pow(y = 8, 2)
pow(2, y = 8)
pow <- function(x, y = 2) {
# function to print x raised to the power y
result <- x^y
print(paste(x,"raised to the power", y, "is", result))
}
pow(5)
pow(5,3)  # overrides the default assignment
C <- function(x) {
(2*x - 1)^2
}
C(1:10)
# Method 2
C <- function(x) {
(2*x - 1)^2
return((2*x - 1)^2)
}
C(1:10)
# Method 2
FunctionA <- function(x)
if (x %% 3 == 0) {
print("the number is divisible by 3")
} else {
print("the number is not divisible by 3")
}
FunctionA(125)
FunctionA(2112)
check <- function(x) {
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check(-3)
check(32)
check(0)
for ( i in 1:4) {
print (i^3)
}
for (i in c(-2,4,7,-1)) {
print (i^3)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
Zscore = function(OV, M, SD) {
OV - M / SD
}
Zscore(25.77,23.54,2.442)
Log?
```
?Log
??Log
??nthroot
Logf = function(x,y) {
a= log(x)*log10(x) / y^1/3
round(a, digits = 2)
}
Logf(32,11)
knitr::opts_chunk$set(echo = TRUE)
logh <- function(x) {
(2*x)
log(x)+log10(x)+log2(x)
}
logh(1:5)
logh <- function(x) {
(2*x)
log(x)+log10(x)+log2(x)
}
logh(1:5)
logh <- function(x) {
(2*x)
return(log(x)+log10(x)+log2(x))
}
logh(1:5)
logh <- function(x) {
(2*x)
return(log(x)+log10(x)+log2(x))
}
logh(2:10)
logh <- function(x) {
(2*x)
return(log(x)+log10(x)+log2(x))
}
logh(2,4,6,8,10)
logh <- function(x) {
return(log(x)+log10(x)+log2(x))
}
logh(1:5)
logh <- function(x) {
return(log(x)+log10(x)+log2(x))
}
logh(2:10)
logh <- function(x) {
return(log(x)+log10(x)+log2(x))
}
logh(seq(2,10,by=2))
logh <- function(x) {
return(log(x)+log10(x)+log2(x))
}
logh(seq(2,10,by=2))
number <- 20
if (number^2 >= 100) {
print('This is a big number')
} else {
print('This is not a big number')
}
number <- 20
if (number^2 >= 100) {
print('This is a big number')
} else {
print('This is not a big number')
}
number <- 5
if (number^2 >= 100) {
print('This is a big number')
} else {
print('This is not a big number')
}
team_A = 5
team_B = 2
if (team_A > team_B){
print ("Team A won")
} else if (team_A < team_B){
print ("Team B won")
} else {
"Team A & B tied"
}
Divisible <- function(x)
if (x %% 3 == 0, x %% 5 == 0) {
Divisible <- function(x)
if (x %% 3 == 0 & x %% 5 == 0) {
print("the number is divisible by Three and Five")
} else if (x %% 3 == 0 & x %% 4 ==0) {
print("the number is not divisible by 3 anf Four")
} else {
print("neither")
}
Divisible(16,45,24)
Divisible <- function(x)
if (x %% 3 == 0 & x %% 5 == 0) {
print("the number is divisible by Three and Five")
} else if (x %% 3 == 0 & x %% 4 ==0) {
print("the number is not divisible by 3 anf Four")
} else {
print("neither")
}
Divisible(16 & 45 & 24)
Divisible(45)
Divisible <- function(x)
if (x %% 3 == 0 & x %% 5 == 0) {
print("the number is divisible by Three and Five")
} else if (x %% 3 == 0 & x %% 4 ==0) {
print("the number is not divisible by 3 anf Four")
} else {
print("neither")
}
Divisible(16)
Divisible(45)
Divisible(24)
mpg %>%
select(displ,cyl, cty, hwy)
for (i in c(11, 13, 17, 19, 23, 29))
print(i^2)
for (i in c(11, 13, 17, 19, 23, 29))
print(i^3)
for (i in c(-2,4,7,-1)) {
print (i^3)
for (i in c(11, 13, 17, 19, 23, 29))
print(i^2)
for (i in c(11, 13, 17, 19, 23, 29))
print(i^3)
for (i in c(11, 13, 17, 19, 23, 29))
print(i^2 - i^3)
for (i in c(11, 13, 17, 19, 23, 29))
print(i^3 - i^2)
-296+0.189(1990)
-296+0.189(1990)
5*5
-296+0.189(1990)
-296+0.189*1990
-296+0.189*1990
40000\50000
40000%%50000
exp(3)
exp(0.0299)
exp(12.8784)
exp(-0.3556)
0^-0.3556
exp(0.0299)
12.8784(.5)^-0.3556
12.8784(1)^-0.3556
12.8784*1^-0.3556
e^2.556
exp(2.556)
1.5^-0.3556
2^-2.5556
1.5^-0.3556
e^2.556*1^-0.3556
exp(2.556)*1^-0.3556
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
CDI <- read_csv("https://dcgerard.github.io/stat_415_615/data/cdi.csv")
CDI
CDI
ggplot(CDI, aes(x=physicians, y=beds))+
geom_abline()
UDA <- read_csv("university.csv")
UDA
exp(log(y))
exp(log(x))
ggplot(CDI, mapping = aes(x=physicians, y=beds))+
geom_point() +
geom_abline(slope = 0.79, intercept = 1.87log(x))
log(CDI$beds)
CDI$beds
log(CDI$beds)
logbeds <- log(CDI$beds)
logphysicians <- log(CDI,physicians)
logphysicians <- log(CDI$physicians)
logbeds <- log(CDI$beds)
logphysicians <- log(CDI$physicians)
ggplot(CDI, mapping = aes(x=logphysicians, y=logbeds))+
geom_point() +
geom_abline(slope = 0.79(x), intercept = 1.87)
logbeds <- log(CDI$beds)
logphysicians <- log(CDI$physicians)
ggplot(CDI, mapping = aes(x=logphysicians, y=logbeds))+
geom_point() +
geom_abline(slope = 0.79, intercept = 1.87)
logbeds <- log(CDI$beds)
logphysicians <- log(CDI$physicians)
ggplot(CDI, mapping = aes(x=physicians, y=beds))+
geom_point() +
geom_abline(slope = 0.79, intercept = 1.87)
logbeds <- log(CDI$beds)
logphysicians <- log(CDI$physicians)
ggplot(CDI, mapping = aes(x=logphysicians, y=logbeds))+
geom_point() +
geom_abline(slope = 0.79, intercept = 1.87)
exp(1.87)*2^0.79
2^0.79
2^0.79
exp(6.26)
exp(0.022)
UDA <- read_csv("university.csv")
ggplot(UDA, mapping = aes(x=gpa, y=act))+
geom_point()
UDA <- read_csv("university.csv")
ggplot(UDA, mapping = aes(x=gpa, y=act))+
geom_point(show_col_types = FALSE)
UDA <- read_csv("university.csv")
ggplot(UDA, mapping = aes(x=gpa, y=act))+
geom_point()
??corr()
cor(UDA$gpa,UDA$act)
UDA <- read_csv("university.csv")
ggplot(UDA, mapping = aes(x=gpa, y=act))+
geom_point()
exp(0.022)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
CDI <- read_csv("https://dcgerard.github.io/stat_415_615/data/cdi.csv")
logbeds <- log(CDI$beds)
logphysicians <- log(CDI$physicians)
ggplot(CDI, mapping = aes(x=logphysicians, y=logbeds))+
geom_point() +
geom_abline(slope = 0.79, intercept = 1.87)
2^0.79
exp(0.022)
exp(6.26)
UDA <- read_csv("university.csv")
ggplot(UDA, mapping = aes(x=gpa, y=act))+
geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
Zscore = function(OV, M, SD) {
((OV-M) %% SD)
}
Zscore(25.77,23.54,2.442)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
Zscore = function(OV, M, SD) {
((OV-M) %% SD)
}
Zscore(25.77,23.54,2.442)
Zscore = function(OV, M, SD) {
(OV - M) %% SD
}
Zscore(25.77,23.54,2.442)
Zscore = function(OV=25.77, M=23.54, SD=2.442) {
(OV - M) %% SD
}
Zscore()
25.77 - 23.54 %% 2.442
(25.77 - 23.54) %% 2.442
Zscore = function(OV=25.77, M=23.54, SD=2.442) {
(OV - M) %% SD
}
Zscore()
Zscore = function(OV=25.77, M=23.54, SD=2.442) {
(OV - M) / SD
}
Zscore()
Zscore = function(OV=25.77, M=23.54, SD=2.442) {
(OV - M) / SD
}
Zscore()
Zscore = function(OV=25.77, M=23.54, SD=2.442) {
(OV - M) / SD
}
Zscore()
Logf = function(x,y) {
a= log(x)*log10(x) / y^1/3
round(a, digits = 2)
}
Logf(32,11)
Logf = function(x= 32,y=11) {
a= log(x)*log10(x) / y^1/3
round(a, digits = 2)
}
Logf()
??log
Logf = function(x=32,y=11) {
a= (log10(x)*log(x)) / y^1/3
round(a, digits = 2)
}
Logf()
11**1/3
11^1/3
?exp()
Logf = function(x=32,y=11) {
a= (log(x)*log(x)) / y^1/3
round(a, digits = 2)
}
Logf()
?exp()
Logf = function(x=32,y=11) {
a= (loge(x)*log(x)) / y^1/3
round(a, digits = 2)
}
Logf = function(x=32,y=11) {
a= (loge(x)*log(x)) / y^1/3
round(a, digits = 2)
}
logf()
Logf = function(x=32,y=11) {
a= (loge(x)*log(x)) / y^1/3
round(a, digits = 2)
}
logf()
Logf = function(x=32,y=11) {
a= (loge(x)*log(x)) / y^1/3
round(a, digits = 2)
}
Logf()
Logf = function(x=32,y=11) {
a= (exp(x)*log(x)) / y^1/3
round(a, digits = 2)
}
Logf()
Logf = function(x=32,y=11) {
a= (log(x)*log10(x)) / y^1/3
round(a, digits = 2)
}
Logf()
Logf = function(x=32,y=11) {
a= (log(x))*(log10(x)) / y^1/3
round(a, digits = 2)
}
Logf()
Logf = function(x=32,y=11) {
a= (log(x))*(log10(x)) / y^1/3
round(a, digits = 2)
}
Logf()
Logf = function(x=32,y=11) {
a= (log(x))*(log10(x)) / y^1/3
round(a, digits = 2)
}
Logf()
knitr::opts_chunk$set(echo = TRUE)
UA <- read_csv("https://dcgerard.github.io/stat_415_615/data/university.csv")
UA
UA
UA <- read_csv("https://dcgerard.github.io/stat_415_615/data/university.csv")
ggplot(UA, mapping = aes(x= gpa, y=act))+
geom_point()
cor(UA$gpa, UA$act)
UA <- read_csv("https://dcgerard.github.io/stat_415_615/data/university.csv")
ggplot(UA, mapping = aes(x= gpa, y=act))+
geom_point()
UA <- read_csv("https://dcgerard.github.io/stat_415_615/data/university.csv")
ggplot(UA, mapping = aes(x= act, y=gpa))+
geom_point()
UA <- read_csv("https://dcgerard.github.io/stat_415_615/data/university.csv")
ggplot(UA, mapping = aes(x= gpa, y=act))+
geom_point()
lm(gpa~act, UA)
library(broom)
UAlm <- lm(gpa~act, UA)
tidy(UAlm)
UAlm
newdf <- data.frame(new_act = c(31, 18, 5, 29))
newdf
newdf <- data.frame(new_act = c(31, 18, 5, 29))
newdf
predict(UAlm, newdf)
newdf <- data.frame(act = c(31, 18, 5, 29))
newdf
predict(UAlm, newdf)
range(UA$gpa)
range(UA$act)
range(act)
range(UA$act)
